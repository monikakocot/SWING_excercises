package mouseExcercise;

/*
The program which in the place where you click will draw some shapes,
e.g. squares. It does not matter if we use mousePressed, mouseReleased or mouseClicked for this purpose, it all depends
from our invention, but let's assume it will be mousePressed.

A panel with drawing 10x10 pixel squares:

We have two variables x, y, which will store the place in which the user clicked. Data needed for this
we get in the MouseEvent object, which is the parameter of the mousePressed method we use. The position of the cursor at the moment
we get the incident via the getX () and getY () methods. In addition, we have created a boolean variable, thanks it, the square
is not drawn after starting the program in (0,0), which is the default value of x and y. In the mousePressed method, each time
we modify variables x and y and call the repaint () method. Drawing consists in filling the background with white color and drawing
a black square with 10x10 pixels.

A program that contains a panel implementing the MouseListener in the frame.
Information about events will be displayed in the console using the standard output stream.
*/
/*
INTRO:

The last type of simple events generated by the user are clicks, sweeps, or just a change in the position of the mouse cursor.

In the case of events generated by the keyboard, the KeyListener interface is used.
In the case of events generated by the mouse, however, two interfaces can be distinguished that are used to capture two types of events that can occur:

• MouseListener - the mouse event listener interface. Responsible for clicks and cursor over the listening component.
• MouseMotionListener - an interface that allows you to capture events related to the movement of the cursor.

It is also worth mentioning that there are MouseAdapter and MouseMotionAdapter classes, thanks to which we do not have to implement all methods,
and only those we need - the downside is of course that there is no multi-inheritance in Java, so if we expand
for example, the JPanel class, we will not be able to use the adapter class.

The MouseListener interface has five methods:

// method called when clicking, that is, pressing and releasing the mouse button, but note, both of these operations must occur in one position:
public void mouseClicked (MouseEvent event)

// method called when the mouse button is pressed:
public void mousePressed (MouseEvent event)

// method called when the mouse button is released:
public void mouseReleased (MouseEvent event)

// method called when the cursor appears in the listening area for events, for example the panel:
public void mouseEntered (MouseEvent event)

// method called when the cursor leaves the listening area of ​​the event:
public void mouseExited (MouseEvent event)

As you can see, all of the methods receive the MouseEvent object as a parameter. It stores a lot of interesting information about
the incident that occurred. We can read the cursor position from the point (0,0) of our panel or other component
listener and location on the screen. Button that was pressed, and much more. In addition, the MouseEvent class has a number
defined constants with which we can compare the data received from the system. In order to be able to capture mouse events at all, we must first
add to the component listening to the appropriate listener, using the methods addMouseListener, or addMouseMotionListener.
*/

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.JPanel;

public class MouseTestPanel extends JPanel implements MouseListener {


    // What is now commented created a program that drew a square and then erased it and drew a new one.
    // Squares were NOT collected in the ArrayList only as one Point object.


    //private static final int DEFAULT_WIDTH = 200;
    //private static final int DEFAULT_HEIGHT = 200;

    private static final int WIDTH = 400;
    private static final int HEIGHT = 400;

    private int x, y;

    //Point p = new Point();
    ArrayList<Point> points = new ArrayList<>(); // instead of Point p

    public MouseTestPanel() {
        addMouseListener(this);
        //setPreferredSize(new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGHT));
        setPreferredSize(new Dimension(WIDTH, HEIGHT));

    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override // sth like  ActionPerformed
    public void mousePressed(MouseEvent e) {

        x = e.getX();
        y = e.getY();
        points.add(new Point(x, y)); //zamiast p= new...
        //p= new Point(x,y);
        repaint(); // refresh view after click - square will appear
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.WHITE);
        //g2d.fillRect(0, 0, this.getWidth(), this.getHeight());
        g2d.fillRect(0, 0, WIDTH, HEIGHT);

        drawRectangles(g2d);
    }


    private void drawRectangles(Graphics2D g2d) {
        int x, y;
        for (Point p : points) {
            x = (int) p.getX();
            y = (int) p.getY();
            g2d.setColor(Color.BLACK);
            g2d.fillRect(x, y, 10, 10);
        }
    }
    /*
    private void drawRectangles(Graphics2D g2d) {
        int x, y;

        x = (int) p.getX();
        y = (int) p.getY();
        g2d.fillRect(x, y, 10, 10);
    }
*/
}